/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/AnimatedImage.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image BackGround;
    touchgfx::TextAreaWithOneWildcard KMPH_MPH_ODO;
    touchgfx::TextAreaWithOneWildcard DriverInfo_Units;
    touchgfx::TextAreaWithOneWildcard ODOReadings;
    touchgfx::TextAreaWithTwoWildcards DriverInfo;
    touchgfx::TextAreaWithOneWildcard DriverInfoMenu;
    touchgfx::TextAreaWithOneWildcard Clock_HR;
    touchgfx::TextAreaWithOneWildcard Clock_MN;
    touchgfx::TextArea Clock_SEC;
    touchgfx::TextAreaWithOneWildcard AM_PM;
    touchgfx::ScalableImage Teperature_w;
    touchgfx::ScalableImage Temperature_r;
    touchgfx::ScalableImage LowBeam_w;
    touchgfx::ScalableImage LowBeam_r;
    touchgfx::ScalableImage Parking_w;
    touchgfx::ScalableImage Parking_r;
    touchgfx::ScalableImage DoorsIcon_w;
    touchgfx::ScalableImage DoorsIcon_r;
    touchgfx::ScalableImage SeatBelt_w;
    touchgfx::ScalableImage SeatBelt_r;
    touchgfx::ScalableImage ABS_Detection_w;
    touchgfx::ScalableImage ABS_Detection_r;
    touchgfx::ScalableImage EngineOIl_w;
    touchgfx::ScalableImage EngineOIl_r;
    touchgfx::ScalableImage ServiceReminder_w;
    touchgfx::ScalableImage ServiceReminder_y;
    touchgfx::ScalableImage EngineWarning_w;
    touchgfx::ScalableImage EngineWarning_y;
    touchgfx::ScalableImage HighBeam_w;
    touchgfx::ScalableImage HighBeam_r;
    touchgfx::ScalableImage LeftIndicator_w;
    touchgfx::ScalableImage LeftIndicator_r;
    touchgfx::ScalableImage RightIndicator_w;
    touchgfx::ScalableImage RightIndicator_r;
    touchgfx::AnimatedImage RPMAnimation;
    touchgfx::AnimatedImage FuelBarAnimation;
    touchgfx::ScalableImage RPMIcon_w;
    touchgfx::ScalableImage RPMIcon_r;
    touchgfx::ScalableImage FuelICon_w;
    touchgfx::ScalableImage FuelIcon_r;
    touchgfx::ScalableImage LowBatteryIcon_w;
    touchgfx::ScalableImage LowBatteryIcon_r;
    touchgfx::Gauge gauge1;
    touchgfx::PainterRGB888 gauge1Painter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t KMPH_MPH_ODO_SIZE = 10;
    touchgfx::Unicode::UnicodeChar KMPH_MPH_ODOBuffer[KMPH_MPH_ODO_SIZE];
    static const uint16_t DRIVERINFO_UNITS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar DriverInfo_UnitsBuffer[DRIVERINFO_UNITS_SIZE];
    static const uint16_t ODOREADINGS_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ODOReadingsBuffer[ODOREADINGS_SIZE];
    static const uint16_t DRIVERINFOBUFFER1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar DriverInfoBuffer1[DRIVERINFOBUFFER1_SIZE];
    static const uint16_t DRIVERINFOBUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar DriverInfoBuffer2[DRIVERINFOBUFFER2_SIZE];
    static const uint16_t DRIVERINFOMENU_SIZE = 20;
    touchgfx::Unicode::UnicodeChar DriverInfoMenuBuffer[DRIVERINFOMENU_SIZE];
    static const uint16_t CLOCK_HR_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Clock_HRBuffer[CLOCK_HR_SIZE];
    static const uint16_t CLOCK_MN_SIZE = 10;
    touchgfx::Unicode::UnicodeChar Clock_MNBuffer[CLOCK_MN_SIZE];
    static const uint16_t AM_PM_SIZE = 5;
    touchgfx::Unicode::UnicodeChar AM_PMBuffer[AM_PM_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // SCREEN1VIEWBASE_HPP
